// Project:             Final
// Class:               ContactFrame
// Date:                04/11/2025
// Author:              Jason Acuna
// Description:         This class creates a GUI for adding and 
//                      displaying contact information using inheritance. 
//                      Includes exception handling with ContactException
//                      for validating address inputs.
//                      Contact data is stored in a list, and the total count 
//                      is dynamically updated. Sorting, saving to file, and 
//                      loading from file are supported.
package Acuna;

import java.util.Arrays;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;

public class ContactFrame extends javax.swing.JFrame
{
    // create a reference for the default list model for the list
    DefaultListModel<String> model;
    
    // Lab11: replace array with arrayList
    ArrayList<Contact> contactArrayList = new ArrayList<Contact>();

    
    
    /**
     * Creates new form ContactFrame
     */
    public ContactFrame()
    {
        initComponents();
        
        // create the default list model object
        model = new DefaultListModel<String>();
        
        // set the model to the list
        lstContacts.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtStreet = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        lblCount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstContacts = new javax.swing.JList<>();
        cbxContactType = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        lblDependentInfo = new javax.swing.JLabel();
        txtDependentInfo = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Lab12 by Acuna"));

        jLabel1.setText("Name");

        jLabel2.setText("Phone");

        jLabel3.setText("Email");

        txtName.setText("Smith");

        txtPhone.setText("111-1111");

        txtEmail.setText("smith@gmail.com");

        jLabel4.setText("Street");

        jLabel5.setText("City");

        jLabel6.setText("State");

        jLabel7.setText("Zip");

        txtStreet.setText("123 Main");

        txtCity.setText("Mentor");

        txtState.setText("OH");

        txtZip.setText("44060");

        lblCount.setText("Count: 0");

        lstContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstContactsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstContacts);

        cbxContactType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Business", "Family", "Friend" }));
        cbxContactType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxContactTypeActionPerformed(evt);
            }
        });

        jLabel8.setText("Contact type");

        lblDependentInfo.setText("Company");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(txtPhone)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtZip, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtStreet, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                            .addComponent(txtCity)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblDependentInfo)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDependentInfo))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblCount)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cbxContactType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxContactType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDependentInfo)
                    .addComponent(txtDependentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(lblCount)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnSort.setText("Sort");
        btnSort.setToolTipText("");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSort, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnExit)
                    .addComponent(btnSort)
                    .addComponent(btnDelete)
                    .addComponent(btnSave)
                    .addComponent(btnLoad)
                    .addComponent(btnClear))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExitActionPerformed
    {//GEN-HEADEREND:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddActionPerformed
    {//GEN-HEADEREND:event_btnAddActionPerformed
        addContact();         // #7: Add contact
        clearTextFields();    // #7: Clear fields
        sortContacts();       // #7: Sort the list
    }//GEN-LAST:event_btnAddActionPerformed
    //Lab8: Sorting
    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        sortContacts();
    }//GEN-LAST:event_btnSortActionPerformed

    private void cbxContactTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxContactTypeActionPerformed
    // determine which was selected and set the label
        	// lblDependentInfo is (Company, Relationship or Friend)
        	switch(cbxContactType.getSelectedIndex())
        	{
            case 0:
                	lblDependentInfo.setText("Company");
                	break;
            case 1:
                	lblDependentInfo.setText("Relationship");
                	break;
            case 2:
                	lblDependentInfo.setText("Year Met");
                	break;
        	}
        
        	// clear the textbox
        	txtDependentInfo.setText("");

    }//GEN-LAST:event_cbxContactTypeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    // Get the selected index from the list box
    int selectedIndex = lstContacts.getSelectedIndex();

    // If nothing is selected, show error and exit
    if (selectedIndex == -1) {
        JOptionPane.showMessageDialog(this, "Nothing Selected in List Box",
                "Deletion Error!", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Final Project - Step 9: Confirm deletion with the user
    int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to delete this contact?", 
        "Confirm Deletion", 
        JOptionPane.YES_NO_OPTION);

    // If user confirms, call deleteContact
    if (confirm == JOptionPane.YES_OPTION) {
        // Final Project - Step 8: Perform deletion
        deleteContact(selectedIndex);
      }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // create a BufferedWriter and use it to write to the file.
    try
    {
        // Create a JFileChooser with user's home directory + folder
            String userDir = System.getProperty("user.home");
            JFileChooser fc = new JFileChooser(userDir + "/Desktop");
            
        // display save dialog
        fc.showSaveDialog(this);
            
        // get selected file
        File file = fc.getSelectedFile();
            
        // open the file
        // The try-with-resources statement is a try statement that declares one or more resources. 
        // A resource is an object that must be closed after the program is finished with it. 
        // The try-with-resources statement ensures that each resource is closed at the end of the statement.
        try (BufferedWriter myWriter = new BufferedWriter(new FileWriter(file)))
        {
            // use a for loop to write all the employees to the file
            for (Contact contact : contactArrayList)
            {
                myWriter.write(contact.toFile() + System.getProperty("line.separator"));
            }
        }
    } 
    catch (IOException e)
    {
        System.out.println(e);
        JOptionPane.showMessageDialog(null, e.getMessage(), "File Write Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        try {
            // Final Project: Requirement #6
            // Clear existing contacts before loading
            contactArrayList.clear();
            model.removeAllElements();
            Contact.resetCount();
            
            // Create a JFileChooser with user's home directory + folder
            String userDir = System.getProperty("user.home");
            JFileChooser fc = new JFileChooser(userDir + "/Desktop");
            
            // display save dialog
            fc.showOpenDialog(this);
            
           // get selected file
           File file = fc.getSelectedFile();
            
           // create the BufferedReader
           // The try-with-resources statement is a try statement that declares one or more resources. 
           // A resource is an object that must be closed after the program is finished with it. 
           // The try-with-resources statement ensures that each resource is closed at the end of the statement.
           try (BufferedReader myReader = new BufferedReader(new FileReader(file)))
           {

               // create reference to String to hold line from file
               String line;

               // Create reference to array to hold individual fields from the string.
               String[] fields;

               // read the first line
               line = myReader.readLine();

               // create reference to Employee object.
               Contact contact;

               // if line not null
               while (line != null)
               {
                   // split line it into its fields.
                   fields = line.split(",");

                   // get the type from field 7
                   Contact.ContactType type = Contact.ContactType.valueOf(fields[7]);

                   // decide which type it is
                   switch (type)
                   {
                       case BUSINESS:
                           contact = new ContactBusiness(fields[0], fields[1], fields[2], fields[3],
                                       fields[4], fields[5], fields[6], type, fields[8]);

                           // Add the ContactBusiness to the model for the listbox
                           model.addElement(contact.toString());

                           // add the object to the arrayList
                           contactArrayList.add(contact);
                           break;
                       case FAMILY:
                           contact = new ContactFamily(fields[0], fields[1], fields[2], fields[3],
                                       fields[4], fields[5], fields[6], type, fields[8]);

                           // Add the ContactBusiness to the model for the listbox
                           model.addElement(contact.toString());

                           // add the object to the arrayList
                           contactArrayList.add(contact);
                           break;
                       case FRIEND:
                           contact = new ContactFriend(fields[0], fields[1], fields[2], fields[3],
                                       fields[4], fields[5], fields[6], type, Integer.parseInt(fields[8]));

                           // Add the ContactBusiness to the model for the listbox
                           model.addElement(contact.toString());

                           // add the object to the arrayList
                           contactArrayList.add(contact);
                           break;
                       default:
                           System.out.println("Error: number of fields not 8");
                           break;
                   }

                   // read the next line.
                   line = myReader.readLine();
               }
            }
        // Get the current count from the Contact class and display it in the label
        lblCount.setText("Count: " + Contact.getCount());
    }
    catch (IOException | ContactException e)
    {
        JOptionPane.showMessageDialog(null, e.getMessage(), "File Read Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearTextFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void lstContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstContactsMouseClicked
        String selected = lstContacts.getSelectedValue();

    if (selected == null || selected.isEmpty()) return;

    String[] parts = selected.split(",");

    if (parts.length < 9) return;

    txtName.setText(parts[0].trim());
    txtEmail.setText(parts[1].trim());
    txtPhone.setText(parts[2].trim());
    txtStreet.setText(parts[3].trim());
    txtCity.setText(parts[4].trim());
    txtState.setText(parts[5].trim());
    txtZip.setText(parts[6].trim());

    String type = parts[7].trim();
    switch (type) {
        case "BUSINESS":
            cbxContactType.setSelectedIndex(0);
            lblDependentInfo.setText("Company");
            break;
        case "FAMILY":
            cbxContactType.setSelectedIndex(1);
            lblDependentInfo.setText("Relationship");
            break;
        case "FRIEND":
            cbxContactType.setSelectedIndex(2);
            lblDependentInfo.setText("Year Met");
            break;
    }

    txtDependentInfo.setText(parts[8].trim());

    }//GEN-LAST:event_lstContactsMouseClicked
    // Final Project: Requirement #4
    // Clears all input text fields but does NOT clear the list box
    private void clearTextFields() {
        txtName.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtStreet.setText("");
        txtCity.setText("");
        txtState.setText("");
        txtZip.setText("");
        txtDependentInfo.setText("");
}
    // Final Project: Requirement #5
    // Sorts the contact list and updates the list box
    private void sortContacts() {
    // Sort the contactArrayList using compareTo
    contactArrayList.sort(null);

    // Clear the list model
    model.removeAllElements();

    // Re-add sorted contacts to the model
    for (Contact contact : contactArrayList) {
        model.addElement(contact.toString());
    }
    
}
// #7: Adds a new contact based on form inputs
    private void addContact() {
        if (txtName.getText().trim().isEmpty() || 
            txtEmail.getText().trim().isEmpty() ||
            txtPhone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.", 
                "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
}
    Contact.ContactType type = Contact.ContactType.BUSINESS;
    Contact contact = null;

    try {
        switch (cbxContactType.getSelectedIndex()) {
            case 0:
                type = Contact.ContactType.BUSINESS;
                contact = new ContactBusiness(txtName.getText(), txtEmail.getText(),
                        txtPhone.getText(), txtStreet.getText(), txtCity.getText(),
                        txtState.getText(), txtZip.getText(), type, txtDependentInfo.getText());
                break;

            case 1:
                type = Contact.ContactType.FAMILY;
                contact = new ContactFamily(txtName.getText(), txtEmail.getText(),
                        txtPhone.getText(), txtStreet.getText(), txtCity.getText(),
                        txtState.getText(), txtZip.getText(), type, txtDependentInfo.getText());
                break;

            case 2:
                type = Contact.ContactType.FRIEND;
                contact = new ContactFriend(txtName.getText(), txtEmail.getText(),
                        txtPhone.getText(), txtStreet.getText(), txtCity.getText(),
                        txtState.getText(), txtZip.getText(), type,
                        Integer.parseInt(txtDependentInfo.getText()));
                break;
        }

        model.addElement(contact.toString());
        contactArrayList.add(contact);
        lblCount.setText("Count: " + Contact.getCount());
    } catch (ContactException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(),
                "Contact Creation Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(),
                "Contact Creation Error", JOptionPane.ERROR_MESSAGE);
    }
}
    // Final Project - Step 8
    private void deleteContact(int selectedIndex) {
    // Remove contact using selected index from list box 
    contactArrayList.remove(selectedIndex);

    // Remove the selected value from the model by using the selected index
    model.remove(selectedIndex);

    // Decrement the count
    Contact.decrementCount();

    // Update the label
    lblCount.setText("Count: " + Contact.getCount());
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ContactFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ContactFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSort;
    private javax.swing.JComboBox<String> cbxContactType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblDependentInfo;
    private javax.swing.JList<String> lstContacts;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDependentInfo;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtStreet;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables
}
